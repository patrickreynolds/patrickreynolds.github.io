<!--
- Header, content area, sidebar, and a footer using divs 
- Spans
- Add padding, borders, and margins
- Center your content area in the browser
- Add width and height to divs and give them ids
-->
<!DOCTYPE html>
<html>
	<head>
		<title>Tech Bits</title>
		<link rel="stylesheet" type="text/css" href="stylesheets/week2_technical_blog.css">
	</head>
	<body>
		<div class="header">
			<div class="wrapper">
				<h1 class="page-title">Tech Bits</h1>
			</div>
		</div>
		<div class="wrapper">
			<div class="sidebar">
				<ul class="sidebar-nav">
					<li class="sidebar-nav-element html-nav-element"><a href="#">HTML</a></li>
					<li class="sidebar-nav-element css-nav-element"><a href="#">CSS</a></li>
					<li class="sidebar-nav-element javascript-nav-element"><a href="#">Javascript</a></li>
					<li class="sidebar-nav-element ror-nav-element"><a href="#">Ruby on Rails</a></li>
				</ul>
			</div>
			<div class="content">
				<div class="article">
					<div class="article-header css-style">Why.JS?</div>
					<div class="article-header-details">May 10, 2014 - 7:12pm</div>
					<div class="article-content">
						Javascript has been, and looks like it will continue to be, the primary defacto programming
						language of the web. Javascript is specifically used to access and manipulate the DOM, or 
						also known as document object model. The DOM provides an API to javascript in a since 
						on how to perform CRUD options. This would mean javascript is used to create new content, remove 
						specific content, update content, as well as delete content from the DOM. This is essential when 
						creating interactive web applications. Javascript's popularity as a programming language as grown
						significantly over the recent years for two reasons. The first is due to client-side frameworks, and the second is due to the introduction of node.js and server-side javascript.
						<br />
						<br />
						Client side frameworks were introduced with a critical need to solve, and that was organization of client side data, and event driven synchronization. Popular frameworks such as Angular, Backbone, and Ember are commonly used to "clean up" the javascript running in an application. After following the suggested conventions of the frameworks, it makes managing client side javascript and json data much more simple.
						<br />
						<br />
						The second reason javascript has become much more popular over the past few years is due to a new javascript platform called Node.js. Node allows javascript applications to run server-side as a complement to the client-side javascript that we have known and worked with for years. This enables developers with the opportunity to create full-stack applications using only one language. On top of pure simplicity, a pure javascript application can also allow the developer with the maximum throughput and efficiency.
					</div>
				</div>
			</div>
		</div>
		<div class="footer">
			<div class="wrapper">
				<div class="footer-name">Patrick Reynolds</div>
				<div class="social-media-links">
					<ul>
						<li><a href="http://www.facebook.com/patricl.reynolds.161"><span class="facebook"></span></a></li>
						<li><a href="http://www.linkedin.com/in/patrickscottreynolds"><span class="linkedin"></span></a></li>
						<li><a href="http://twitter.com/patrickr3ynolds"><span class="twitter"></span></a></li>
						<li><a href="http://github.com/patrickreynolds"><span class="github"></span></a></li>
						<li><a href="http://google.com"><span class="google-plus"></span></a></li>
					</ul>
				</div>
			</div>
		</div>
	</body>
</html>